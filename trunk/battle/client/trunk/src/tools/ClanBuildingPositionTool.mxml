<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%" keyDown="keyDownHandler(event)" >
	
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.netease.flash.common.net.PoolResLoader;
			import com.netease.webgame.bitchwar.config.constants.BuildingConstants;
			import com.netease.webgame.bitchwar.config.constants.ProfileConstants;
			import com.netease.webgame.bitchwar.model.vo.building.ClanBuildingVO;
			import com.netease.webgame.bitchwar.util.AssetUtil;
			import com.netease.webgame.bitchwar.util.LayOutUtil;
		
			private var poolResLoader:PoolResLoader;
			private var drag_mc:Sprite;
			
			[Bindable]
			private var clan:int = 1;
			
			private var posIdDic:Dictionary = new Dictionary();
			
			public function initBuilding():void {
				while(container.numChildren>0) {
					container.removeChildAt(0);
				}
				generateBuilding(BuildingConstants.BUILDING_TYPE_ABATTOIR, BuildingConstants.POS_ABATTOIR);
				generateBuilding(BuildingConstants.BUILDING_TYPE_VILLAGE_MANAGER, BuildingConstants.POS_VILLAGE_MANAGER);
				generateBuilding(BuildingConstants.BUILDING_TYPE_TENT, BuildingConstants.POS_MYSTICAL_TENT);
				generateBuilding(BuildingConstants.BUILDING_TYPE_ALTAR, BuildingConstants.POS_ALTAR);
				generateBuilding(BuildingConstants.BUILDING_TYPE_WONDER, BuildingConstants.POS_WONDER);
				generateBuilding(BuildingConstants.BUILDING_TYPE_FOOD, BuildingConstants.POS_FOOD);
				generateBuilding(BuildingConstants.BUILDING_TYPE_DEFENCE, BuildingConstants.POS_CLAN_DEFEND);
				generateBuilding(BuildingConstants.BUILDING_TYPE_WEAPON, BuildingConstants.POS_CLAN_WEAPON);
				generateBuilding(BuildingConstants.BUILDING_TYPE_MARKET, BuildingConstants.POS_MARKET);
				drag_mc = null;
			}
			
			private function generateBuilding(type:int, pos:int):void {
				var buildingVO:ClanBuildingVO = new ClanBuildingVO();
					buildingVO.pos = pos;
					buildingVO.clanId = clan;
					buildingVO.buildingType = type;
				var grid:AdvancedBuildingGrid = new AdvancedBuildingGrid();
					grid.data = buildingVO;
					grid.boundIndex = 1;
					grid.labelPositionFunction = clanLabelPositionFunc;
					grid.imageFunction = clanBuildImageFunc;
					grid.positionFunction = clanBuildingPositionFunc;
					grid.addEventListener(AdvancedBuildingGrid.BUILDING_MOUSE_DOWN, startDragHandler);
				posIdDic[pos] = grid;
				container.addChild(grid);
			}
			
			private function clanLabelPositionFunc(buildingVO:ClanBuildingVO):Point {
				return LayOutUtil.getBuildingLabelPos(buildingVO.clanId, buildingVO.buildingType, 1);
			}
			
			private function clanBuildingPositionFunc(value:ClanBuildingVO, boundIndex:int=1):Object {
				return LayOutUtil.getClanBuildingPos(value.pos, value.clanId);
			}
			
			private function clanBuildImageFunc(value:ClanBuildingVO, repair:Boolean=false, boundIndex:int=1):Object {
				if (value) {
					return AssetUtil.getClanBuildingMc(value.clanId, value.buildingType);
				}
				return null;
			}
			
			private function startDragHandler(event:Event):void {
				this.setFocus();
				drag_mc = event.currentTarget as Sprite;
				drag_mc.startDrag();
				stage.addEventListener(MouseEvent.MOUSE_UP, stopDragHandler);
			}
			
			private function stopDragHandler(event:Event):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragHandler);
				drag_mc.stopDrag();
				for (var key:String in posIdDic){
					if(posIdDic[key]==drag_mc){
						var point:Point = LayOutUtil.getClanBuildingPos(int(key), clan);
							point.x = drag_mc.x;
							point.y = drag_mc.y;
						clanLabel.text = "x:" + point.x + "　y:" + point.y;
					}
				}
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			override protected function keyDownHandler(event:KeyboardEvent):void {
				super.keyDownHandler(event);
				if(drag_mc==null){
					return;
				}
				var point:Point;
				for (var key:String in posIdDic){
					if(posIdDic[key]==drag_mc){
						point = LayOutUtil.getClanBuildingPos(int(key), clan);
						break;
					}
				}
				if(event.keyCode==Keyboard.LEFT){
					point.x--;
				} else if(event.keyCode==Keyboard.RIGHT){
					point.x++;
				} else if(event.keyCode==Keyboard.UP){
					point.y--;
				} else if(event.keyCode==Keyboard.DOWN){
					point.y++;
				}
				drag_mc.x = point.x;
				drag_mc.y = point.y;
				clanLabel.text = "x:" + point.x + "　y:" + point.y;
			}
		]]>
	</mx:Script>
	
	<mx:Canvas x="120" width="980" height="100%">
		<mx:Image source="{AssetUtil.getClanDesignSrc(clan)}" />
		<mx:UIComponent id="container" />
		<mx:Label id="clanLabel" top="2" horizontalCenter="0" filters="{[new GlowFilter(0x000000, 1, 2, 2, 4, 2)]}" color="0xFFFFFF" />
	</mx:Canvas>
	<mx:ComboBox width="100" x="6" y="184" id="clanCb" selectedIndex="{clan-1}" dataProvider="{ProfileConstants.CLAN_NAME_CONSTS}" change="{clan=ProfileConstants.CLAN_ID_CONSTS[clanCb.selectedIndex];initBuilding()}" />
</mx:Canvas>