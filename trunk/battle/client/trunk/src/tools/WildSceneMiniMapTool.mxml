<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:game="com.netease.webgame.bitchwar.view.game.*" 
			fontSize="12" creationComplete="init()" width="100%" height="100%">
	
	<mx:Script>
		<![CDATA[
			import com.netease.webgame.bitchwar.component.CommonDebugger;
			import com.netease.webgame.bitchwar.component.core.RecycableFactory;
			import com.netease.webgame.bitchwar.config.SecondaryWildSceneTemplate;
			import com.netease.webgame.bitchwar.config.WildSceneConfig;
			import com.netease.webgame.bitchwar.config.WildSceneTemplate;
			import com.netease.webgame.bitchwar.events.IntoWildSceneEvent;
			import com.netease.webgame.bitchwar.util.AssetUtil;
			import com.netease.webgame.bitchwar.util.LayOutUtil;
			import com.netease.webgame.bitchwar.view.game.WildSceneMiniMapRenderer;
			
			import mx.collections.ArrayCollection;
			
			[Bindable]
			private var wildSceneList:ArrayCollection;
			
			[Bindable]
			private var secondaryWildSceneList:ArrayCollection;
			
			private var icons:Array;
			
			public function selected():void {
				var list:ArrayCollection = WildSceneConfig.getInstance().secondaryWildSceneList;
				var i:int;
				var j:int;
				var jointId:Number;
				var template:SecondaryWildSceneTemplate;
				var joinTemplate:SecondaryWildSceneTemplate;
				var result:String = "";
				for(i=0; i<list.length; i++) {
					template = list[i];
					if(template.sceneJoinPoints!=null && template.sceneJoinPoints.length>0) {
						for(j=0; j<template.sceneJoinPoints.length; j++) {
							jointId = template.sceneJoinPoints[j];
							joinTemplate = WildSceneConfig.getInstance().getSwstById(jointId);
							if(joinTemplate==null) {
								result += "连接点不存在，当前子场景ID：" + template.id + "，目标连接点：" + jointId;
								result += "\r\n";
							} else {
								if(joinTemplate.sceneJoinPoints==null || joinTemplate.sceneJoinPoints.indexOf(template.id)==-1) {
									result += "连接点不对称，当前ID为" + template.id + "的子场景包含了目标连接点" + joinTemplate.id + "，但" + joinTemplate.id + "未连接到" + template.id;
									result += "\r\n";
								}
							}
						}
					}
				}
				if(result!="") {
					CommonDebugger.append(result);
				}
			}
			
			private function init():void {
				addEventListener(IntoWildSceneEvent.INTO_SECONDARY_WILD_SCENE, intoWildSceneHandler, true);
			}
			
			private function intoWildSceneHandler(event:IntoWildSceneEvent):void {
				var point:Point = LayOutUtil.getWildScenePointPos(event.data);
				miniMapLabel.text = "x:" + point.x + "　y:" + point.y;
			}
			
			public function initEditor():void {
				wildSceneList = new ArrayCollection();
				var source:ArrayCollection = WildSceneConfig.getInstance().wildSceneList;
				var i:int;
				var template:WildSceneTemplate;
				for(i=0; i<source.length; i++) {
					template = source.getItemAt(i) as WildSceneTemplate;
					if(template.id>10 && template.type!=3) {
						wildSceneList.addItem(template);
					}
				}
				changeWildScene();
			}
			
			private function changeWildScene():void {
				nameTxt.text = WildSceneTemplate(sceneList.selectedItem).name;
				miniMap.currentSecondWildScene = WildSceneConfig.getInstance().secondaryWildSceneDic[(sceneList.selectedItem as WildSceneTemplate).id+1];
				miniMap.secondWildSceneList = generateSecondaryWildSceneList(WildSceneTemplate(sceneList.selectedItem).id);
				generateGraphic(generateSecondaryWildSceneList(WildSceneTemplate(sceneList.selectedItem).id));
			}
			
			private function generateGraphic(list:Array):void {
				var template:SecondaryWildSceneTemplate;
				var points:Dictionary = new Dictionary();
				var point:Point;
				var i:int;
				var j:int;
				var angle:Number = 0;
				var delta:Number = 360 / (list.length);
				var linkTemplate:SecondaryWildSceneTemplate;
				var linkPoint:Point;
				var renderer:WildSceneMiniMapRenderer;
				var factory:RecycableFactory = RecycableFactory.getInstanceByDefinition(WildSceneMiniMapRenderer);
				for (i=0; i<list.length; i++) {
					template = list[i];
					point = new Point();
					point.x = 490 + 200*Math.sin(Math.PI*angle/180);
					point.y = 295 - 200*Math.cos(Math.PI*angle/180);
					if(angle<90 || angle>270) {
						point.y += 24;
					} 
					angle += delta;
					points[template.id] = point;
				}
				grahpicLayer.graphics.clear();
				grahpicLayer.graphics.lineStyle(2, 0xFFFF00, 1);
				recycle();
				if(icons==null) {
					icons = [];
				}
				for (i=0; i<list.length; i++) {
					template = list[i];
					point = points[template.id];
					for(j=0; j<template.sceneJoinPoints.length; j++) {
						linkPoint = points[template.sceneJoinPoints[j]];
						grahpicLayer.graphics.moveTo(point.x, point.y);
						grahpicLayer.graphics.lineTo(linkPoint.x, linkPoint.y);
					}
					renderer = factory.newInstance();
					renderer.x = 120 + point.x;
					renderer.y = point.y;
					renderer.template = template;
					addChild(renderer);
					icons.push(renderer);
				}
			}
			
			private function recycle():void {
				if(icons!=null) {
					var item:WildSceneMiniMapRenderer;
					var factory:RecycableFactory = RecycableFactory.getInstanceByDefinition(WildSceneMiniMapRenderer);
					while(icons.length>0) {
						item = icons.pop();
						if(item.parent) {
							item.parent.removeChild(item);
						}
						factory.recycle(item);
					}
				}
			}
			
			private function generateSecondaryWildSceneList(sceneID:Number):Array {
				var i:int;
				var source:ArrayCollection = WildSceneConfig.getInstance().secondaryWildSceneList;
				var results:Array = [];
				var template:SecondaryWildSceneTemplate;
				for (i=0; i<source.length; i++) {
					template = source.getItemAt(i) as SecondaryWildSceneTemplate;
					if(template.wildSceneId==sceneID) {
						results.push(template);
					}
				}
				return results;
			}
			
			
			private var copyTemplate:WildSceneTemplate;
			private function copyPoints():void {
				copyTemplate = sceneList.selectedItem as WildSceneTemplate;
			}
			
			private function setPoints():void {
				if(copyTemplate!=null) {
					var copyPoints:Array = generateSecondaryWildSceneList(copyTemplate.id);
					var targetPoints:Array = generateSecondaryWildSceneList(WildSceneTemplate(sceneList.selectedItem).id);
					var i:int;
					var length:int = Math.min(copyPoints.length, targetPoints.length);
					var copyPoint:Point;
					var targetPoint:Point;
					for(i=0; i<length; i++) {
						copyPoint = LayOutUtil.getWildScenePointPos(copyPoints[i]);
						targetPoint = LayOutUtil.getWildScenePointPos(targetPoints[i]);
						targetPoint.x = copyPoint.x;
						targetPoint.y = copyPoint.y;
					}
					changeWildScene();
				}
				sceneList.setFocus();
			}
			
		]]>
	</mx:Script>
	<mx:Canvas x="120" width="980" height="100%">
		<mx:Image width="100%" height="100%" source="{AssetUtil.getWildSceneSrc(WildSceneTemplate(sceneList.selectedItem).id+1)}" />
		<mx:Canvas id="miniMapContainer" verticalScrollPolicy="off" horizontalScrollPolicy="off" width="229" height="192" right="0" top="2" styleName="WildSceneMiniMapBg">
			<mx:Label id="nameTxt" x="12" y="5" fontWeight="bold" />
			<game:WildSceneMiniMap id="miniMap" editable="true" x="3" y="32" />
		</mx:Canvas>
		<mx:Label id="miniMapLabel" y="2" horizontalCenter="0" filters="{[new GlowFilter(0x000000, 1, 2, 2, 4, 2)]}" color="0xFFFFFF" />
		<mx:UIComponent id="grahpicLayer" filters="{[new GlowFilter(0x000000, 1, 2, 2, 4, 2)]}"  />
	</mx:Canvas>
	<mx:VBox y="184" x="6">
		<mx:ComboBox width="100" id="sceneList" change="changeWildScene()" dataProvider="{wildSceneList}" labelField="name" rowCount="10" />
		<mx:Button width="100" click="copyPoints()" label="复制当前坐标" />
		<mx:Button width="100" click="setPoints()" label="粘贴当前坐标" />
	</mx:VBox>
</mx:Canvas>
