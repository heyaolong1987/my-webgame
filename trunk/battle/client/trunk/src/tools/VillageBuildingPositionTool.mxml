<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%" keyDown="keyDownHandler(event)" >
	
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.netease.flash.common.net.PoolResLoader;
			import com.netease.webgame.bitchwar.component.mapClasses.village.BuildingGrid;
			import com.netease.webgame.bitchwar.config.CommonConfig;
			import com.netease.webgame.bitchwar.config.constants.BuildingConstants;
			import com.netease.webgame.bitchwar.config.constants.ProfileConstants;
			import com.netease.webgame.bitchwar.model.vo.building.VillageBuildingVO;
			import com.netease.webgame.bitchwar.util.AssetUtil;
			import com.netease.webgame.bitchwar.util.LayOutUtil;
			
			import mx.controls.Menu;
			import mx.events.MenuEvent;
		
			private var poolResLoader:PoolResLoader;
			private var drag_mc:AdvancedBuildingGrid;
			
			[Bindable]
			private var config:CommonConfig;
			
			private var mouseDownTime:Number;
			
			[Bindable]
			private var age:int = 0;
			[Bindable]
			private var clan:int = 1;
			
			private var posNameDic:Dictionary = new Dictionary();
			
			public function initBuilding():void {
				config = CommonConfig.getInstance();
				while(container.numChildren>0){
					container.removeChildAt(0);
				}
				var createVO:Object;
				var ary:Array = [];
				
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_WALL, BuildingConstants.POS_WALL));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_TEMPLE, BuildingConstants.POS_TEMPLE));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_TOWER, BuildingConstants.POS_TOWER, 2));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_FARM, BuildingConstants.POS_FARM));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_ARMORY, BuildingConstants.POS_0));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_OUTPOST, BuildingConstants.POS_1));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_BEASTIARY, BuildingConstants.POS_2));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_WAREHOUSE, BuildingConstants.POS_3));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_PRECIOUSE_SHOP, BuildingConstants.POS_4));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_MEDICINE_SHOP, BuildingConstants.POS_5));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_PRACTISE, BuildingConstants.POS_6));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_MINE, BuildingConstants.POS_MINE));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_FOREST, BuildingConstants.POS_FOREST));
				ary = ary.concat(generateBuilding(BuildingConstants.BUILDING_TYPE_SLAVE_SHOP, BuildingConstants.POS_SLAVE_SHOP));
				
				boundingDic = new Dictionary();
				
				ary.sort(sortOnPosition);
				
				for(var i:int=0; i<ary.length; i++) {
					createVO = ary[i];
					createBuilding(createVO);
				}
				if(drag_mc){
					drag_mc.selected = false;
					drag_mc = null;
				}
			}
			
			private function sortOnPosition(a:Object, b:Object):Number {
				var ab:VillageBuildingVO = a.buildingVO;
				var bb:VillageBuildingVO = b.buildingVO;
				var abound:int = a.boundIndex;
				var bbound:int = b.boundIndex;
				var aIn:int = LayOutUtil.getVillageBuildingIndex(clan, ab.pos, abound);
				var bIn:int = LayOutUtil.getVillageBuildingIndex(clan, bb.pos, bbound);
				if(aIn>bIn) {
					return 1;
				} else if(aIn<bIn) {
					return -1;
				}
				return 0;
			}
			
			private function generateBuilding(type:int, pos:int, boundCount:int=1):Array {
				var buildingVO:VillageBuildingVO = new VillageBuildingVO();
				buildingVO.level = levelCb.selectedIndex+1;
				buildingVO.state = BuildingConstants.STATUS_NORMAL;
				buildingVO.buildingType = type;
				buildingVO.pos = pos;
				buildingVO.clanId = clan;
				var result:Object;
				var bounds:Array = [];
				for(var i:int=0; i<boundCount; i++) {
					result = new Object();
					result.buildingVO = buildingVO;
					result.boundIndex = i+1;
					bounds.push(result);
				}
				return bounds;
			}
			
			private var boundingDic:Dictionary;
			
			private function createBuilding(data:Object):void {
				var items:Array = [];
				var buildingVO:VillageBuildingVO = data.buildingVO;
				var boundCount:int = buildingVO.getChildCount();
				var i:int;
				var grid:AdvancedBuildingGrid;
				var boundBuildings:Array;
				if(boundCount>1) {
					boundBuildings = boundingDic[buildingVO.buildingType];
					if(boundBuildings==null) {
						boundBuildings = new Array();
						boundingDic[buildingVO.buildingType] = boundBuildings;
					}
				}
				trace(buildingVO.buildingType, data.boundIndex);
				grid = new AdvancedBuildingGrid();
				grid.boundIndex = data.boundIndex;
				grid.data = buildingVO;
				if(boundCount>1) {
					boundBuildings.push(grid);
				}
				grid.boundBuildings = boundBuildings;
				grid.imageFunction = villageBuildImageFunc;
				grid.statusIconPositionFunction = villageStatusIconPositionFunc;
				grid.positionFunction = villageBuildingPositionFunc;
				grid.labelPositionFunction = villageLabelPositionFunc;
				grid.addEventListener(AdvancedBuildingGrid.BUILDING_MOUSE_DOWN, startDragHandler);
				posNameDic[buildingVO.pos+"_"+(grid.boundIndex+1)] = grid;
				container.addChild(grid);
			}
			
			private function villageLabelPositionFunc(buildingVO:VillageBuildingVO):Point {
				return LayOutUtil.getBuildingLabelPos(buildingVO.clanId, buildingVO.buildingType, buildingVO.level);
			}
			
			private function villageBuildingPositionFunc(buildingVO:VillageBuildingVO, boundIndex:int):Point {
				var point:Point = LayOutUtil.getVillageBuildingPos(buildingVO.pos, age, clan, buildingVO.level, boundIndex);
				return point;
			}
			
			private function villageBuildImageFunc(value:VillageBuildingVO, repair:Boolean=false, boundIndex:int=1):Object {
				if (value) {
					return AssetUtil.getVillageBuildingMc(value.clanId, value.buildingType, value.state, value.level, repair, boundIndex);
				}
				return null;
			}
			
			private function villageStatusIconPositionFunc(value:VillageBuildingVO, index:int):Point {
				return LayOutUtil.getVillageBuildingCreateIconPos(value.buildingType, age, clan, value.level, index);
			}
			
			private function startDragHandler(event:Event):void {
				this.setFocus();
				drag_mc = event.currentTarget as AdvancedBuildingGrid;
				mouseDownTime = getTimer();
				drag_mc.startDrag();
				stage.addEventListener(MouseEvent.MOUSE_UP, stopDragHandler);
				var point:Point = LayOutUtil.getVillageBuildingPos(VillageBuildingVO(drag_mc.data).pos, age, clan,VillageBuildingVO(drag_mc.data).level, drag_mc.boundIndex);
				villagelabel.text = "x:" + point.x + "　y:" + point.y;
			}
			
			private function stopDragHandler(event:Event):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragHandler);
				drag_mc.stopDrag();
				var point:Point;
				for (var key:String in posNameDic){
					if(posNameDic[key]==drag_mc){
						point = LayOutUtil.getVillageBuildingPos(VillageBuildingVO(drag_mc.data).pos, age, clan,VillageBuildingVO(drag_mc.data).level, drag_mc.boundIndex);
						point.x = drag_mc.x;
						point.y = drag_mc.y;
						villagelabel.text = "x:" + point.x + "　y:" + point.y;
						break;
					}
				}
				dispatchEvent(new Event(Event.CHANGE));
				if(getTimer()-mouseDownTime<320){
					point = localToGlobal(new Point(mouseX, Math.min(260, mouseY)));
					var menu:Menu = Menu.createMenu(this, ["上移一层","下移一层","空地","升级中","建造中","1级","2级","3级","4级","5级","6级","7级","8级","9级","10级"]);
						menu.addEventListener(MenuEvent.ITEM_CLICK, menuSelectHandler);
						menu.addEventListener(MenuEvent.MENU_HIDE, menuHideHandler)
						menu.show(point.x, point.y);
				}
			}
			
			protected function menuHideHandler(event:MenuEvent):void {
				this.setFocus();
			}
			
			protected function menuSelectHandler(event:MenuEvent):void {
				if(drag_mc==null) {
					return;
				}
				var buildingVO:VillageBuildingVO = VillageBuildingVO(drag_mc.data);
				if(event.label=="升级中"){
					if(!(buildingVO.level>0)){
						buildingVO.level = 1;
					}
					buildingVO.state = BuildingConstants.STATUS_UPGRADING;
				} else if(event.label=="空地") {
					buildingVO.state = BuildingConstants.STATUS_DEFAULT;
					buildingVO.level = 0;
				} else if(event.label=="建造中") {
					buildingVO.state = BuildingConstants.STATUS_CREATE;
					buildingVO.level = 0;
				} else if(event.label=="上移一层") {
					drag_mc.parent.setChildIndex(drag_mc, Math.min(drag_mc.parent.getChildIndex(drag_mc)+1, drag_mc.parent.numChildren-1));
					regenerateBuildingIndex();
				} else if(event.label=="下移一层") {
					drag_mc.parent.setChildIndex(drag_mc, Math.max(drag_mc.parent.getChildIndex(drag_mc)-1, 0));
					regenerateBuildingIndex();
				} else {
					buildingVO.level = int(event.label.substr(0, event.label.length-1));
					buildingVO.state = BuildingConstants.STATUS_NORMAL;
					var point:Point = LayOutUtil.getVillageBuildingPos(buildingVO.pos, age, clan, buildingVO.level, drag_mc.boundIndex);
					drag_mc.x = point.x;
					drag_mc.y = point.y;
				}
			}
			
			protected function regenerateBuildingIndex():void {
				var index:int = 0;
				var grid:BuildingGrid;
				var buildingVO:VillageBuildingVO;
				while(index<container.numChildren) {
					grid = container.getChildAt(index) as BuildingGrid;
					buildingVO = grid.data as VillageBuildingVO;
					LayOutUtil.setVillageBuildingIndex(clan, buildingVO.pos, grid.boundIndex, index);
					index++;
				}
			}
			
			override protected function keyDownHandler(event:KeyboardEvent):void {
				super.keyDownHandler(event);
				if(drag_mc==null){
					return;
				}
				var point:Point;
				for (var key:String in posNameDic){
					if(posNameDic[key]==drag_mc){
						point = LayOutUtil.getVillageBuildingPos(VillageBuildingVO(drag_mc.data).pos, age, clan, VillageBuildingVO(drag_mc.data).level, drag_mc.boundIndex);
						break;
					}
				}
				if(event.keyCode==Keyboard.LEFT){
					point.x--;
				} else if(event.keyCode==Keyboard.RIGHT){
					point.x++;
				} else if(event.keyCode==Keyboard.UP){
					point.y--;
				} else if(event.keyCode==Keyboard.DOWN){
					point.y++;
				}
				drag_mc.x = point.x;
				drag_mc.y = point.y;
				villagelabel.text = "x:" + point.x + "　y:" + point.y;
			}
			
			
			private var copyLevel:int;
			private var copyAge:int;
			private var copyClan:int;
			private function copyPoints():void {
				copyLevel = levelCb.selectedIndex+1;
				copyAge = age;
				copyClan = clan;
			}
			
			private function setPoints():void {
				copyPoint(BuildingConstants.POS_0);
				copyPoint(BuildingConstants.POS_1);
				copyPoint(BuildingConstants.POS_2);
				copyPoint(BuildingConstants.POS_3);
				copyPoint(BuildingConstants.POS_4);
				copyPoint(BuildingConstants.POS_5);
				copyPoint(BuildingConstants.POS_6);
				
				copyPoint(BuildingConstants.POS_TEMPLE);
				copyPoint(BuildingConstants.POS_FARM);
				copyPoint(BuildingConstants.POS_FOREST);
				copyPoint(BuildingConstants.POS_MINE);
				copyPoint(BuildingConstants.POS_WALL);
				copyPoint(BuildingConstants.POS_TOWER);
				copyPoint(BuildingConstants.POS_TOWER, 2);
				copyPoint(BuildingConstants.POS_SLAVE_SHOP);
			
				initBuilding();
			}
			
			private function copyPoint(pos:int, boundIndex:int=1):void {
				var _curpoint:Point = LayOutUtil.getVillageBuildingPos(pos, age, clan, levelCb.selectedIndex+1, boundIndex);
				var _copyPoint:Point = LayOutUtil.getVillageBuildingPos(pos, copyAge, copyClan, copyLevel, boundIndex);
				_curpoint.x = _copyPoint.x;
				_curpoint.y = _copyPoint.y;
			}
			
			private var copyStatusLevel:int;
			private var copyStatusClan:int;
			private var copyStatusAge:int;
			private function copyStatusPoints():void {
				copyStatusClan = clan;
				copyStatusAge = age;
				if(stateCb.selectedIndex==2) {
					copyStatusLevel = 0;
				} else {
					copyStatusLevel = levelCb.selectedIndex+1;
				}
			}
			
			private function setStatusPoints():void {
				if(copyStatusClan==clan){
					var grid:AdvancedBuildingGrid;
					var index:int;
					var targetLevel:int;
					if(stateCb.selectedIndex==2) {
						targetLevel = 0;
					} else {
						targetLevel = levelCb.selectedIndex+1;
					}
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_TEMPLE, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_WALL, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_WALL, copyStatusAge, copyStatusLevel, targetLevel, 2);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_TOWER, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_ARMORY, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_OUTPOST, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_BEASTIARY, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_WAREHOUSE, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_PRECIOUSE_SHOP, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_MEDICINE_SHOP, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_FARM, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_FOREST, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_MINE, copyStatusAge, copyStatusLevel, targetLevel, 1);
					copyStatusPoint(BuildingConstants.BUILDING_TYPE_SLAVE_SHOP, copyStatusAge, copyStatusLevel, targetLevel, 1);
					while(index<container.numChildren){
						grid = container.getChildAt(index) as AdvancedBuildingGrid;
						grid.relayoutStatusMc();
						index++;
					}
				}
			}
			
			private function copyStatusPoint(type:int, copyStatusAge:int, level:int, targetLevel:int, index:int):void {
				if(stateCb.selectedIndex==2) {
					targetLevel = 0;
				}
				var _point:Point = LayOutUtil.getVillageBuildingCreateIconPos(type, copyStatusAge, clan, level, index);
				var _curpoint:Point = LayOutUtil.getVillageBuildingCreateIconPos(type, age, clan, targetLevel, index);
				_curpoint.x = _point.x;
				_curpoint.y = _point.y;
			}
			
			private function changeState():void {
				var index:int = 0;
				var grid:AdvancedBuildingGrid;
				var buildingVO:VillageBuildingVO;
				if(stateCb.selectedIndex==0){
					while(index<container.numChildren){
						grid = container.getChildAt(index) as AdvancedBuildingGrid;
						buildingVO = grid.data as VillageBuildingVO;
						buildingVO.level = levelCb.selectedIndex+1;
						buildingVO.state = BuildingConstants.STATUS_NORMAL;
						index++;
					}
				} else if(stateCb.selectedIndex==1) {
					while(index<container.numChildren){
						grid = container.getChildAt(index) as AdvancedBuildingGrid;
						buildingVO = grid.data as VillageBuildingVO;
						buildingVO.level = levelCb.selectedIndex+1;
						buildingVO.state = BuildingConstants.STATUS_UPGRADING;
						index++;
					}
				} else {
					while(index<container.numChildren){
						grid = container.getChildAt(index) as AdvancedBuildingGrid;
						buildingVO = grid.data as VillageBuildingVO;
						buildingVO.state = BuildingConstants.STATUS_CREATE;
						buildingVO.level = 0;
						index++;
					}
				}
			}
			
			private function getLevelLabel(data:Object, ...args):String {
				return data+"级";
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas x="120" width="980" height="100%">
		<mx:Image source="{AssetUtil.getVillageSceneSrc(clan, age)}" />
		<mx:UIComponent id="container" />
		<mx:Label id="villagelabel" top="2" horizontalCenter="0" filters="{[new GlowFilter(0x000000, 1, 2, 2, 4, 2)]}" color="0xFFFFFF" />
	</mx:Canvas>
	<mx:VBox y="184" x="6">
		<mx:ComboBox id="clanCb" width="100" y="56" selectedIndex="{clan-1}" dataProvider="{ProfileConstants.CLAN_NAME_CONSTS}" change="{clan=ProfileConstants.CLAN_ID_CONSTS[clanCb.selectedIndex];initBuilding()}" />
		<mx:ComboBox id="ageCb" width="100" x="280" selectedIndex="{age}" labelField="name" dataProvider="{config.village_ageNames}" change="{age=ageCb.selectedIndex;initBuilding()}" />
		<mx:ComboBox id="levelCb" width="100" x="370" selectedIndex="0" rowCount="11" dataProvider="[1,2,3,4,5,6,7,8,9,10]" labelFunction="getLevelLabel" change="{initBuilding()}" />
		<mx:ComboBox id="stateCb" width="100" x="460" selectedIndex="0" dataProvider="['正常','升级中','建造中']" change="{changeState()}" />
		
		<mx:Button label="复制建筑坐标" width="100" x="550" click="copyPoints()" />
		<mx:Button label="粘贴建筑坐标" width="100" x="650" click="setPoints()" />
		
		<mx:Button label="复制状态坐标" width="100" x="750" click="copyStatusPoints()" />
		<mx:Button label="粘贴状态坐标" width="100" x="850" click="setStatusPoints()" />
	</mx:VBox>
	
</mx:Canvas>
