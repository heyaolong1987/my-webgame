<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.netease.core.algorithm.CNavMesh;
			import com.netease.core.algorithm.astar.NavMeshAStar;
			import com.netease.core.algorithm.astar.NavMeshAstarNode;
			
			import mx.controls.Alert;
			private var MODE_NORMAL:int = 0;
			private var MODE_EDIT_WALL:int = 1;
			private var MODE_EDIT_ROAD:int = 2;
			private var MODE_FIND_PATH:int = 3;
			private var MODE_EDIT_ALPHA:int = 4;
			
			private var TERRAIN_ROAD:int = 0;
			private var TERRAIN_WALL:int = 1;
			private var TERRAIN_ALPHA:int = 2;
			[Bindable]
			private var _bmp:Bitmap=null;
			private var _recordList:Array=[];
			[Bindable]
			private var _zoom:int = 100;
			[Bindable]
			private var _editMode:int;
			private var editWidth:int = 800;
			private var editHeight:int = 500;
			private var arcs:Array;
			private var arcsGrid:Array;
			private var gridBitmapData:BitmapData;
			private var _gridBitmap:Bitmap;
			private var colNum:int;
			private var rowNum:int;
			[Bindable]
			private var _editTerrainSize:int=1;
			
			private var astarNodeList:Vector.<NavMeshAstarNode>;
			private var findPathStep:int = 0;
			private var findPathSX:int;
			private var findPathSY:int;
			private var findPathEX:int;
			private var findPathEY:int;
			private var path:Array;
			private function init():void{
				_bmp = new Bitmap();
				uiBitmap.addChild(_bmp);
				_gridBitmap = new Bitmap();
				uiTerrain.addChild(_gridBitmap);
				refreshBitMapData();
			}
			override public function set visible(value:Boolean):void{
				super.visible = value;
				refreshBitMapData();
			}
			public function refreshBitMapData():void{
				var i:int,j:int;
				if(_bmp&&_bmp.bitmapData != Data.bitmapData){
					_bmp.bitmapData = Data.bitmapData;
					_recordList = [];
					uiTerrainGrid.graphics.clear();
					if(_bmp.bitmapData){
						uiTerrainGrid.graphics.lineStyle(2,0xcccccc);
						var bmpWidth:int = _bmp.bitmapData.width;
						var bmpHeight:int = _bmp.bitmapData.height;
						colNum = Math.ceil(bmpWidth/Config.terrainWidth);
						rowNum = Math.ceil(bmpHeight/Config.terrainHeight);
						for(i=0; i<=bmpWidth; i+=Config.terrainWidth){
							uiTerrainGrid.graphics.moveTo(i-1,0);
							uiTerrainGrid.graphics.lineTo(i-1,bmpHeight);
						}
						for(j=0; j<=bmpHeight; j+=Config.terrainHeight){
							uiTerrainGrid.graphics.moveTo(0,j-1);
							uiTerrainGrid.graphics.lineTo(bmpWidth,j-1);
						}
						
						gridBitmapData = _bmp.bitmapData.clone();
						gridBitmapData.fillRect(new Rectangle(0,0,gridBitmapData.width,gridBitmapData.height),0xffffff);
						_gridBitmap.bitmapData = gridBitmapData;
						clearTerrainInfo();
						
					}
				}
			}
			private function onBitmapDataLoadComplete(client:Object,data:Object):void{
				
			}
			private function undoClick():void{
				var _record:Object = _recordList.pop();
			}
			private function saveTerrianInfoClick():void{
				var file:File = new File( Data.file.nativePath + Config.wallName);
				var stream:FileStream = new FileStream();
				var data:ByteArray = generalTerrianInfoByteArray();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(data);
				stream.close();
			}
			private function generalTerrianInfoByteArray():ByteArray{
				var mapId : int = 0;
				var data:ByteArray = new ByteArray();
				data.endian = Endian.LITTLE_ENDIAN;
				data.writeInt(_bmp.width);
				data.writeInt(_bmp.height);
				data.writeInt(Config.terrainWidth);
				data.writeInt(Config.terrainHeight);
				data.writeInt(rowNum);
				data.writeInt(colNum);
				for( var i:int=0; i < colNum; i++)
				{
					for( var j:int=0; j<rowNum; j++)
					{
						data.writeInt(arcs[i][j]);
					}
				}
				return data;
			}
			private function loadTerrainInfoClick():void{
				var file:File = new File(Data.file.nativePath + Config.wallName);
				if(file.exists == false){
					Alert.show("地形信息不存在");
					return;
				}
				var stream:FileStream = new FileStream();
				var data:ByteArray = new ByteArray();
				data.endian = Endian.LITTLE_ENDIAN;
				var mapWidth:int;
				var mapHeight:int;
				var stepX:int;
				var stepY:int;
				var rowNum:int;
				var colNum:int;
				var i:int,j:int;
				stream.open(file, FileMode.READ);
				stream.readBytes(data, 0, stream.bytesAvailable);
				data.position = 0;
				data.endian = Endian.LITTLE_ENDIAN;
				mapWidth = data.readInt();
				mapHeight = data.readInt();
				stepX = data.readInt();
				stepY = data.readInt();
				rowNum = data.readInt();
				colNum = data.readInt();
				for(i=0; i<colNum; i++){
					for(j=0; j<rowNum; j++){
						setTerrainInfo(i, j, data.readInt());
					}
				}
			}
			private function zoomMaxClick():void{
				changeZoom(100);
			}
			private function zoomMinClick():void{
				changeZoom(10);
			}
			
			private function zoomInClick():void{
				if(_zoom>=100){
					return;
				}
				changeZoom(_zoom+10);
			}
			private function changeZoom(zoom:int):void{
				cvsMap.x = editWidth/2-(editWidth/2-cvsMap.x)*(zoom)/_zoom;
				cvsMap.y = editHeight/2-(editHeight/2-cvsMap.y)*(zoom)/_zoom;
				cvsMap.scaleX = (zoom)/100;
				cvsMap.scaleY = (zoom)/100;
				_zoom = zoom;
			}
			private function zoomOutClick():void{
				if(_zoom<=10){
					return;
				}
				changeZoom(_zoom-10);
			}
			private var isDraging:Boolean = false;
			private var lastStageX:int;
			private var lastStageY:int;
			private function onMouseDown(event:MouseEvent):void{
				isDraging = true;
				lastStageX = event.stageX;
				lastStageY = event.stageY;
				switch(_editMode){
					case MODE_NORMAL:
						break;
					case MODE_EDIT_ROAD:
						setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_ROAD,_editTerrainSize);
						break;
					case MODE_EDIT_WALL:
						setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_WALL,_editTerrainSize);
						break;
					case MODE_EDIT_ALPHA:
						setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_ALPHA,_editTerrainSize);
						break;
				}
			}
			private function onMouseMove(event:MouseEvent):void{
				if(isDraging){
					var stageX:int = event.stageX;
					var stageY:int = event.stageY;
					switch(_editMode){
						case MODE_NORMAL:
							cvsMap.x += stageX - lastStageX;
							cvsMap.y += stageY - lastStageY;
							break;
						case MODE_EDIT_ROAD:
							setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_ROAD,_editTerrainSize);
							break;
						case MODE_EDIT_WALL:
							setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_WALL,_editTerrainSize);
							break;
						case MODE_EDIT_ALPHA:
							setTerrainGridsInfo(Math.floor(event.localX/Config.terrainWidth),Math.floor(event.localY/Config.terrainHeight),TERRAIN_ALPHA,_editTerrainSize);
							break;
					}
					lastStageX = stageX;
					lastStageY = stageY;
					trace(cvsMap.x,cvsMap.y);
				}
			}
			private function onMouseUp(event:MouseEvent):void{
				isDraging = false;
			}
			private function onClick(event:MouseEvent):void{
				switch(_editMode){
					case MODE_FIND_PATH:
						if(astarNodeList){
							if(findPathStep == 0){
								findPathSX = event.localX;
								findPathSY = event.localY;
							}
							else if(findPathStep == 1){
								findPathEX = event.localX;
								findPathEY = event.localY;
								path = NavMeshAStar.find(astarNodeList,findPathSX,findPathSY,findPathEX,findPathEY);
							}
							drawPath();
							findPathStep = (findPathStep+1)%2;
						}
						break;
					
				}
			}
			private function drawPath():void{
				uiRoute.graphics.clear();
				if(findPathStep == 0){
					uiRoute.graphics.beginFill(0xff0000);
					uiRoute.graphics.drawCircle(findPathSX,findPathSY,20);
					uiRoute.graphics.endFill();
				}
				if(findPathStep == 1){
					uiRoute.graphics.beginFill(0xff0000);
					uiRoute.graphics.drawCircle(findPathSX,findPathSY,20);
					uiRoute.graphics.endFill();
					uiRoute.graphics.beginFill(0xff0000);
					uiRoute.graphics.drawCircle(findPathEX,findPathEY,20);
					uiRoute.graphics.endFill();
					if(path!=null){
						if(path[0]!=null&&path[0].length>0){
							uiRoute.graphics.lineStyle(5,0x00ff00);
							uiRoute.graphics.moveTo(path[0][0][0],path[0][0][1]);
							for(var i:int=1;i<path[0].length;i++){
								uiRoute.graphics.lineTo(path[0][i][0],path[0][i][1]);
							}
						}
						
						if(path[1]!=null&&path[1].length>0){
							uiRoute.graphics.lineStyle(5,0xff0000);
							uiRoute.graphics.moveTo(path[1][0][0],path[1][0][1]);
							for(var i:int=1;i<path[1].length;i++){
								uiRoute.graphics.lineTo(path[1][i][0],path[1][i][1]);
							}
						}
					}
					
					
				}
			}
			
			
			private function onChangeEditMode(mode:int):void{
				switch(mode){
					case MODE_NORMAL:
						this._editMode = mode;
					case MODE_EDIT_ROAD:
						this._editMode = mode;
						break;
					case MODE_EDIT_WALL:
						this._editMode = mode;
						break;
					case MODE_EDIT_ALPHA:
						this._editMode = mode;
						break;
					case MODE_FIND_PATH:
						this._editMode = mode;
						break;
				}
				if(mode != MODE_FIND_PATH){
					findPathStep = 0;
				}
			}
			private function setTerrainGridsInfo(x:int,y:int,terrainType:int,size:int=1):void{
				for(var i:int=0;i<size;i++){
					for(var j:int=0; j<size; j++){
						if(x+i>=0&&x+i<colNum&&y+j>=0&&y+j<rowNum){
							setTerrainInfo(x+i,y+j,terrainType);
						}
					}
				}
				onTerrainChange();
				
			}
			
			private function clearTerrainInfo():void{
				arcs = [];
				for(var i:int=0; i<colNum; i++){
					arcs[i] = [];
					for(var j:int=0; j<rowNum; j++){
						arcs[i][j] = TERRAIN_ROAD;
					}
				}
				for(var i:int=0;i<colNum;i++){
					for(var j:int=0;j<rowNum;j++){
						setTerrainInfo(i,j,TERRAIN_ROAD);
					}
				}
			}
			private function setTerrainInfo(x:int,y:int,terrainType:int):void{
				arcs[x][y] = terrainType;
				if(gridBitmapData){
					if(arcs[x][y] == TERRAIN_ROAD){
						gridBitmapData.fillRect(new Rectangle(Config.terrainWidth*x+1,Config.terrainHeight*y+1,Config.terrainWidth-2,Config.terrainHeight-2),0xffffff);
						
					}
					else if(arcs[x][y] == TERRAIN_WALL){
						gridBitmapData.fillRect(new Rectangle(Config.terrainWidth*x+1,Config.terrainHeight*y+1,Config.terrainWidth-2,Config.terrainHeight-2),0xfed094);
					}
					else if(arcs[x][y] == TERRAIN_ALPHA){
						gridBitmapData.fillRect(new Rectangle(Config.terrainWidth*x+1,Config.terrainHeight*y+1,Config.terrainWidth-2,Config.terrainHeight-2),0xff0000);
					}
				}
			}
			private function onTerrainChange():void{
				
				
			}
			private function onChangeTerrainSize():void{
				_editTerrainSize = int(tiEditTerrainSize.text);
			}
			private function generalTriangleListClick():void{
				trace(getTimer());
				var t:Array = [];
				var i:int,j:int;
				for(i=0; i < colNum; i++)
				{
					t[i] = [];
					for(j=0; j<rowNum; j++)
					{
						t[i][j] = arcs[i][j] == 1?1:0;
					}
				}
				astarNodeList = CNavMesh.createAstarNode(t,rowNum,colNum,Config.terrainWidth,Config.terrainHeight);
				trace(getTimer());
				onAstarNodeListChanged();
			}
			private function onAstarNodeListChanged():void{
				uiTriangleList.graphics.clear();
				if(astarNodeList){
					for(var i:int=0;i<astarNodeList.length; i++){
						var triangle:NavMeshAstarNode = astarNodeList[i];
						uiTriangleList.graphics.lineStyle(2,0x0000ff);
						uiTriangleList.graphics.moveTo(triangle.x1,triangle.y1);
						uiTriangleList.graphics.lineTo(triangle.x2,triangle.y2);
						uiTriangleList.graphics.lineTo(triangle.x3,triangle.y3);
						uiTriangleList.graphics.lineTo(triangle.x1,triangle.y1);
					}
				}
			}
			private function loadTriangleListClick():void{
				var file:File = new File( Data.file.nativePath + Config.triangleName);
				if(file.exists == false){
					Alert.show("三角网格信息不存在");
					return;
				}
				var stream:FileStream = new FileStream();
				var data:ByteArray = new ByteArray();
				data.endian = Endian.LITTLE_ENDIAN;
				var i:int;
				var len:int;
				stream.open(file, FileMode.READ);
				stream.readBytes(data, 0, stream.bytesAvailable);
				len = data.readInt();
				astarNodeList = new Vector.<NavMeshAstarNode>();
				var node:NavMeshAstarNode;
				for(i=0; i<len; i++){
					node = new NavMeshAstarNode(data.readInt(),data.readInt(),data.readInt(),data.readInt(),data.readInt(),data.readInt());
					node.linkArr[0] = data.readInt();
					node.linkArr[1] = data.readInt();
					node.linkArr[2] = data.readInt();
					node.id = data.readInt();
					astarNodeList.push(node);
				}
				onAstarNodeListChanged();
			}
			
			private function saveTriangleListClick():void{
				if(astarNodeList){
					var data:ByteArray = generalTriangleListByteArray();
					if(data){
						var file:File = new File( Data.file.nativePath + Config.triangleName);
						var stream:FileStream = new FileStream();
						stream.open(file, FileMode.WRITE);
						stream.writeBytes(data);
						stream.close();
					}
					
				}
			}
			private function generalTriangleListByteArray():ByteArray{
				if(astarNodeList){
					var i:int,len:int;
					len = astarNodeList.length;
					var node:NavMeshAstarNode;
					var triangleList:Array = [];
					for(i=0; i<len; i++){
						node = astarNodeList[i];
						triangleList.push({x1:node.x1,y1:node.y1,x2:node.x2,y2:node.y2,x3:node.x3,y3:node.y3,linkArr:node.linkArr,id:node.id});
					}
					var data:ByteArray = new ByteArray();
					data.endian = Endian.LITTLE_ENDIAN;
					data.writeInt(len);
					var obj:Object;
					for(i=0; i<len; i++){
						obj = triangleList[i];
						data.writeInt(obj.x1);
						data.writeInt(obj.y1);
						data.writeInt(obj.x2);
						data.writeInt(obj.y2);
						data.writeInt(obj.x3);
						data.writeInt(obj.y3);
						data.writeInt(obj.linkArr[0]);
						data.writeInt(obj.linkArr[1]);
						data.writeInt(obj.linkArr[2]);
						data.writeInt(obj.id);
					}
					return data;
				}
				return null;
			}
			private function findPathTestClick():void{
				
			}
			private function onShowGridClick():void{
				uiTerrainGrid.visible = cbShowGrid.selected;
			}
			private function showTerrainInfoClick():void{
				uiTerrain.visible = cbShowTerrainInfo.selected;
			}
			private function showAlphaClick():void{
				
			}
			private function showTriangleClick():void{
				uiTriangleList.visible = cbShowTriangle.selected;
			}
			private function showRouteClick():void{
				uiRoute.visible = cbShowRoute.selected;
			}
			private function saveTerrianConfigClick():void{
				var file:File;
				var stream:FileStream;
				var wallBytes:ByteArray;
				var triangleBytes:ByteArray;
				var configBytes:ByteArray;
				if(astarNodeList == null){
					Alert.show("请先生成三角网格信息");
					return;
				}
				file= new File( Data.file.nativePath + Config.wallName);
				stream = new FileStream();
				wallBytes = generalTerrianInfoByteArray();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(wallBytes);
				stream.close();
				
				triangleBytes = generalTriangleListByteArray();
				file = new File( Data.file.nativePath + Config.triangleName);
				stream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(triangleBytes);
				stream.close();
				
				configBytes = new ByteArray();
				configBytes.endian = Endian.LITTLE_ENDIAN;
				configBytes.writeBytes(wallBytes);
				configBytes.writeBytes(triangleBytes);
				
				file = new File( Data.file.nativePath + Config.configName);
				stream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(configBytes);
				stream.close();
			}
		]]>
	</mx:Script>
	<mx:Canvas y="25">
		<mx:VBox verticalGap="2">
			<mx:Button label="载入地形信息" width="80" click="loadTerrainInfoClick()" />
			<mx:Button label="普通"  width="80" click="onChangeEditMode(MODE_NORMAL)"/>
			<mx:Button label="标记可过"  width="80" click="onChangeEditMode(MODE_EDIT_ROAD)"/>
			<mx:Button label="标记不可过"  width="80" click="onChangeEditMode(MODE_EDIT_WALL)"/>
			<mx:Button label="标记透明" width="80" click="onChangeEditMode(MODE_EDIT_ALPHA)"/>
			<mx:Button label="全部清除"  width="80"/>
			<mx:Button label="撤销"  width="80" click="undoClick()" enabled="{_recordList.length>0}"/>
			<mx:Button label="保存地形信息"  width="80" click="saveTerrianInfoClick()" />
			<mx:Button label="载入三角网格"  width="80" click="loadTriangleListClick()" />
			<mx:Button label="生成三角网格"  width="80" click="generalTriangleListClick()" />
			<mx:Button label="保存三角网格"  width="80" click="saveTriangleListClick()" />
			<mx:Button label="寻路测试"  width="80" click="onChangeEditMode(MODE_FIND_PATH)" />
			<mx:Button label="生成配置" width="80" click="saveTerrianConfigClick()"/>
		</mx:VBox>
	</mx:Canvas>
	<mx:Canvas x="100">
		<mx:HBox horizontalGap="2">
			<mx:CheckBox label="显示网格" id="cbShowGrid" click="onShowGridClick()" selected="true"/>
			<mx:CheckBox label="显示地形信息" id="cbShowTerrainInfo" click="showTerrainInfoClick()" selected="true"/>
			<mx:CheckBox label="显示透明区域" id="cbShowAlpha" click="showAlphaClick()" selected="true"/>
			<mx:CheckBox label="显示三角剖分" id="cbShowTriangle" click="showTriangleClick()" selected="true"/>
			<mx:CheckBox label="显示寻路路径" id="cbShowRoute" click="showRouteClick()" selected="true"/>
		</mx:HBox>
	</mx:Canvas>
	<mx:Canvas  x="80" y="25" >
		<mx:Canvas id="cvsTerrainEdit" width="{editWidth}" height="{editHeight}" scrollRect="{new Rectangle(0,0,editWidth,editHeight)}" >
			<mx:Canvas id="cvsMap" mouseChildren="false"
					   mouseMove="onMouseMove(event)" 
					   mouseUp="onMouseUp(event)" 
					   mouseDown="onMouseDown(event)"
					   click="onClick(event)">
				<mx:UIComponent id="uiBitmap"/>
				<mx:UIComponent id="uiTerrain" alpha="0.7"/>
				<mx:UIComponent id="uiTerrainGrid"/>
				<mx:UIComponent id="uiTriangleList"/>
				<mx:UIComponent id="uiRoute"/>
				<mx:UIComponent id="uiAlpha" />
			</mx:Canvas>
		</mx:Canvas>
		<mx:Button x="570" y="{editHeight+5}" width="50" label="max" click="zoomMaxClick()" />
		<mx:Button x="625" y="{editHeight+5}" width="50" label="+" click="zoomInClick()" />
		<mx:Button x="680" y="{editHeight+5}" width="50" label="-" click="zoomOutClick()" />
		<mx:Button x="735" y="{editHeight+5}" width="50" label="min" click="zoomMinClick()" />
	</mx:Canvas>
	
	<mx:Canvas y="{editHeight+30}" visible="{_editMode==MODE_EDIT_ROAD || _editMode ==MODE_EDIT_WALL}">
		<mx:Label text="大小" x="20"/>
		<mx:TextInput id="tiEditTerrainSize" text="{_editTerrainSize}" width="20" x="50" change="onChangeTerrainSize()" />
	</mx:Canvas>
</mx:Canvas>
