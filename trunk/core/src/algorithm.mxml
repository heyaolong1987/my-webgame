<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="absolute" width="1000" height="600" addedToStage="init()" frameRate="40" backgroundColor="0x00ff00"
				xmlns:component="com.netease.webgame.bitchwar.component.*" xmlns:local="*"
				verticalScrollPolicy="off" horizontalScrollPolicy="off" 
				xmlns:display="com.netease.core.display.*">
	<mx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.netease.core.algorithm.astar.AStar;
			import com.netease.core.algorithm.quadtree.QuadTree;
			import com.netease.core.manager.CallLaterManager;
			import com.netease.core.manager.FrameManager;
			import com.netease.core.map.moveobj.MoveObj;
			import com.netease.core.map.moveobj.MoveObjVO;
			import com.netease.core.utils.MovingTween;
			import com.netease.manager.MoveManager;
			import com.netease.model.constants.MapConstants;
			import com.netease.model.vo.moveobj.OtherPlayerVO;
			import com.netease.view.map.moveobj.OtherPlayer;
			
			import flash.sampler.NewObjectSample;
			import flash.utils.getTimer;
			import flash.utils.setTimeout;
			
			import mx.effects.Tween;
			private var objArr:Array = [];
			private var objNum:int = 1;
			private var mapWidth:int = 950;
			private var mapHeight:int = 550;
			
			private var speed:int = 100;
			private var showObj:Boolean = false;
			private var useTween:Boolean = false;
			private function init():void{
				addChild(new LineWalkAbleTestPanel());
				return;
			
				
				FrameManager.getInstance().init(stage);
				CallLaterManager.getInstance().init(stage);
				var quadTree:QuadTree = new QuadTree();
				for(var i:int=0;i<objNum;i++){
					var obj:OtherPlayer = new OtherPlayer();
					obj.x = Math.floor(Math.random()*mapWidth);
					obj.y = Math.floor(Math.random()*mapHeight);
					obj.moveData = new OtherPlayerVO();
					obj.moveData.container = obj;
					obj.moveData.route = new MovingTween();
					obj.moveData.route.container = obj.moveData;
					obj.moveData.id = i;
					objArr.push(obj);
					MoveManager.getInstance().addOtherPalyer(obj);
					addChild(obj);
					quadTree.addOrUpdateObj(obj.x,obj.y,obj);
				}
				setTimeout(onTime,0);
			}
			private function onTime():void{
				var moveIndex:int = Math.floor(Math.random()*objNum);
				var obj:MoveObj = objArr[moveIndex];
				if(useTween){
					if(obj.tween){
						obj.tween.kill();
						obj.tween = null;
					}
				}
				var sx:int = obj.x;
				var sy:int = obj.y;
				var tx:int = Math.floor(Math.random()*mapWidth);
				var ty:int = Math.floor(Math.random()*mapHeight);
		
				var dis:int = Math.sqrt((tx-sx)*(tx-sx)+(ty-sy)*(ty-sy));
				var time:int = Math.ceil(1000*dis/speed);
				if(useTween){
					var tween:TweenMax = TweenMax.to(obj,time/1000,{x:tx,y:ty,onUpdate:onTweenUpdate,onUpdateParams:[obj]});				
					obj.tween = tween;
					tween.play();
				}
				else{
					obj.moveData.route.setRouteInfo([[sx,sy],[tx,ty]],getTimer(),time);
				}
				setTimeout(onTime,Math.floor(Math.random()*3000/objNum));
				var t:MovingTween = new MovingTween();
			}
			
			private function onTweenUpdate(obj:Object):void{
				
			}
		]]>
	</mx:Script>
	<display:FPSTracer x="700" y="10" isOpen="true"/>
</mx:Application>
